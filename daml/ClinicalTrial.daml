module ClinicalTrial where

import Daml.Script
import DA.Set (Set)
import DA.Set qualified as S
import DA.Optional (isNone)
import DA.List (delete)

type ClinicalTrialId = ContractId ClinicalTrial
type PatientInfoId = ContractId PatientInfo
type AddPrincipalResearcherProposalId = ContractId AddPrincipalResearcherProposal
type AddPrincipalResearcherAgreementId = ContractId AddPrincipalResearcherAgreement
type ClinicalTrialProposalId = ContractId ClinicalTrialProposal
type AddMedicProposalId = ContractId AddMedicProposal
type AddMedicAgreementId = ContractId AddMedicAgreement
type AddPatientProposalId = ContractId AddPatientProposal
type AddPatientAgreementId = ContractId AddPatientAgreement

-- Data type definitions
data Sex
  = M | F
    deriving (Eq, Show)

data Phase
  = PhaseI | PhaseII | PhaseIII | PhaseIV
  deriving (Eq, Show)

data TrialState
  = TrialCreated | TrialStarted | TrialCancelled | TrialConcluded
  deriving (Eq, Show)

data RegulatoryAuthorityApproval = RegulatoryAuthorityApproval
  with
    regulatoryAuthority: Party
    approved: Bool
  deriving (Eq, Show)

data Treatment = Treatment
  with
    name: Text
    dosage: Decimal
  deriving (Eq, Show)

data TreatmentResult = TreatmentResult
  with
    patient: Party
    treatment: Treatment
    notes: Text
    time: Time
  deriving (Eq, Show)

data MonitorResult = MonitorResult
  with
    patient: Party
    exam: Text
    notes: Text
    time: Time
  deriving (Eq, Show)

-- 3C. GATHER PATIENTS
template PatientInfo
  with
    patient: Party
    age: Int
    sex: Sex
    observers: Set Party
  where
    signatory patient
    observer observers

    choice SharePatientInfo : PatientInfoId
      with
        party : Party
      controller patient
        do
          assertMsg "Cannot share with self" (party /= patient)
          assertMsg "Already has consent" (S.notMember party observers)
          create this with observers = S.insert party observers

    choice RevokePatientInfo : PatientInfoId
      with
        party : Party
      controller patient
        do
          assertMsg "Cannot revoke from self" (party /= patient)
          assertMsg "Already revoked" (S.member party observers)
          create this with observers = S.delete party observers

template AddPatientProposal
  with
    trial : ClinicalTrial
    medic : Party
    addPatientAgreement : AddPatientAgreement
  where
    signatory medic
    observer addPatientAgreement.patient

    choice AcceptAddPatientProposal : AddPatientAgreementId
      with patientInfoId : PatientInfoId
      controller addPatientAgreement.patient
      do
        assertMsg "Already a patient" (notElem addPatientAgreement.patient trial.patients)
        patientInfo <- fetch patientInfoId
        assertMsg "Patient didn't share Patient Info with this medic" (S.member medic patientInfo.observers)
        create addPatientAgreement


template AddPatientAgreement
  with
    trial : ClinicalTrial
    medic : Party
    patient: Party
  where
    signatory medic, patient

    choice AddPatient : ClinicalTrialId
      with
        trialId : ClinicalTrialId
      controller medic
      do
        exercise trialId (AddPatientAfterAgreement with medic; patient)


-- 1B. ENROLL PRINCIPAL RESEARCHER
template AddPrincipalResearcherProposal
  with
    trialId : ClinicalTrialId
    trial : ClinicalTrial
    addPrincipalResearcherAgreement : AddPrincipalResearcherAgreement
  where
    signatory trial.sponsor
    observer addPrincipalResearcherAgreement.researcher

    choice AcceptAddPrincipalResearcherProposal : AddPrincipalResearcherAgreementId
      controller addPrincipalResearcherAgreement.researcher
      do 
        assertMsg "There is already a Principal Researcher" (isNone trial.principalResearcher)
        create addPrincipalResearcherAgreement


template AddPrincipalResearcherAgreement
  with
    trialId : ClinicalTrialId
    trial : ClinicalTrial
    researcher: Party
  where
    signatory trial.sponsor, researcher

    choice AddPrincipalResearcher : ClinicalTrialId
      controller trial.sponsor
      do
        assertMsg "There is already a Principal Researcher" (isNone trial.principalResearcher)
        archive trialId
        create trial with principalResearcher = Some researcher; observers = S.insert researcher trial.observers

-- 3B. ASSIGN MEDICS
template AddMedicProposal
  with
    trial : ClinicalTrial
    addMedicAgreement : AddMedicAgreement
  where
    signatory trial.principalResearcher
    observer addMedicAgreement.medic

    choice AcceptAddMedicProposal : AddMedicAgreementId
      controller addMedicAgreement.medic
      do
        assertMsg "Already a medic" (notElem addMedicAgreement.medic trial.medics)
        create addMedicAgreement


template AddMedicAgreement
  with
    trial : ClinicalTrial
    medic: Party
  where
    signatory trial.principalResearcher, medic

    choice AddMedic : ClinicalTrialId
      with
        trialId : ClinicalTrialId
      controller trial.principalResearcher
      do
        exercise trialId (AddMedicAfterAgreement with medic)

-- 2. PROPOSE CLINICAL TRIAL
template ClinicalTrialProposal
  with
    regulatoryAuthority : Party
    trial : ClinicalTrial
  where
    signatory trial.sponsor
    observer regulatoryAuthority

    choice AcceptClinicalTrialProposal : ClinicalTrialId
      with
        trialId : ClinicalTrialId
      controller regulatoryAuthority
        do
          trial <- fetch trialId
          archive trialId
          create trial with regulatoryAuthorityApprovals = map (\regulatoryAuthorityApproval -> if regulatoryAuthorityApproval.regulatoryAuthority == regulatoryAuthority then regulatoryAuthorityApproval with approved = True else regulatoryAuthorityApproval) trial.regulatoryAuthorityApprovals

    -- TODO: Reject

-- 1A. NEW CLINICAL TRIAL

template ClinicalTrial
  with
    name : Text
    phase: Phase
    sponsor : Party
    state : TrialState
    principalResearcher: Optional Party
    regulatoryAuthorityApprovals : [RegulatoryAuthorityApproval]
    treatments : [Treatment]
    treatmentResults : [TreatmentResult]
    monitorResults : [MonitorResult]
    brochurePath : Optional Text
    patients : [Party]
    medics : [Party]
    observers : Set Party
  where
    signatory sponsor
    observer observers
    -- 1B. Invite Principal Researcher
    nonconsuming choice InvitePrincipalResearcher : AddPrincipalResearcherProposalId
      with
        trialId : ClinicalTrialId
        researcher : Party
      controller sponsor
        do
          assertMsg "Trial has already started" (state == TrialCreated)
          assertMsg "There is already a Principal Researcher" (isNone principalResearcher)
          create AddPrincipalResearcherProposal
            with trialId; trial = this; addPrincipalResearcherAgreement = AddPrincipalResearcherAgreement with trialId; trial = this; researcher
    -- 2. Propose Clinical Trial
    choice ProposeClinicalTrial : (ClinicalTrialId, ClinicalTrialProposalId)
      with
        regulatoryAuthority : Party
      controller sponsor
        do
          assertMsg "Trial has already started" (state == TrialCreated)
          assertMsg "Already proposed trial to this Regulatory Authority" (not (any (\element -> element.regulatoryAuthority == regulatoryAuthority) regulatoryAuthorityApprovals))
          let regulatoryAuthorityApproval = RegulatoryAuthorityApproval with regulatoryAuthority, approved = False
          newTrialId <- create this with regulatoryAuthorityApprovals = regulatoryAuthorityApproval :: regulatoryAuthorityApprovals, observers = S.insert regulatoryAuthority observers
          newTrialProposalId <- create ClinicalTrialProposal
            with regulatoryAuthority; trial = this
          return (newTrialId, newTrialProposalId)
    -- 2b. Start Clinical Trial
    choice StartTrial : ClinicalTrialId
      controller sponsor
        do
          assertMsg "Trial has already started" (state == TrialCreated)
          assertMsg "Pending approval of a Regulatory Authority" (not (any (\element -> not element.approved) regulatoryAuthorityApprovals))
          create this with state = TrialStarted
    -- 3a. Prepare Trial Brochure
    choice CreateBrochure : ClinicalTrialId
      with
        brochurePath : Text
      controller principalResearcher
        do
          create this with brochurePath = Some brochurePath
    -- 3b. Assign Medic/Researcher
    nonconsuming choice InviteMedic : AddMedicProposalId
      with
        medic : Party
      controller principalResearcher
        do
          assertMsg "Trial is not in progress" (state == TrialStarted)
          assertMsg "Already a medic" (notElem medic medics)
          create AddMedicProposal
            with
              trial = this
              addMedicAgreement = AddMedicAgreement
                with trial = this; medic
    

    choice AddMedicAfterAgreement : ClinicalTrialId
      with
        medic : Party
      controller principalResearcher
      do
        assertMsg "Trial is not in progress" (state == TrialStarted)
        assertMsg "Already a medic" (notElem medic medics)
        create this 
          with 
            medics = medic :: medics
            observers = S.insert medic observers
    -- 3c. Invite Patient
    nonconsuming choice InvitePatient : AddPatientProposalId
      with
        medic : Party
        patient : Party
      controller medic
        do
          assertMsg "Trial is not in progress" (state == TrialStarted)
          assertMsg "Not a medic" (elem medic medics)
          create AddPatientProposal
            with
              medic; trial = this
              addPatientAgreement = AddPatientAgreement
                with trial = this; medic; patient
    
    choice AddPatientAfterAgreement : ClinicalTrialId
      with
        medic : Party
        patient : Party
      controller medic
      do
        assertMsg "Trial is not in progress" (state == TrialStarted)
        assertMsg "Not a medic" (elem medic medics)
        assertMsg "Already a patient" (notElem patient patients)
        create this
          with 
            patients = patient :: patients
            observers = S.insert patient observers
    
    -- 5. Performs Treatment
    choice PerformTreatment: ClinicalTrialId
      with
        medic: Party
        -- patient: Party
        -- treatment: Treatment
        -- notes: Text
        -- dateTime: Time
        treatmentResultToAdd: TreatmentResult
      controller medic
        do
          create this with treatmentResults = treatmentResultToAdd::treatmentResults

    -- 6a. Monitor Patient
    choice MonitorPatient: ClinicalTrialId
      with
        medic: Party
        monitorResultToAdd: MonitorResult
      controller medic
        do
          create this with monitorResults = monitorResultToAdd::monitorResults
          
    -- 6b. Drop Patient
    choice DropPatient : ClinicalTrialId
      with
        medic : Party
        patient : Party
      controller medic
      do
        assertMsg "Trial is not in progress" (state == TrialStarted)
        assertMsg "Not a medic" (elem medic medics)
        assertMsg "Not a patient" (elem patient patients)
        create this
          with 
            patients = delete patient patients
            observers = S.delete patient observers

    -- 8. Cancel Clinical Trial​
    choice CancelTrial : ClinicalTrialId
      with
        regulatoryAuthority : Party
      controller regulatoryAuthority
      do
        assertMsg "Trial is not in progress" (state == TrialStarted)
        assertMsg "Not a regulatoryAuthority" (any (\element -> element.regulatoryAuthority == regulatoryAuthority) regulatoryAuthorityApprovals)
        create this
          with state = TrialCancelled
    


-- SCRIPT START
setup : Script ()

setup = script do
  sponsor1 <- allocateParty "Pfizer Sponsor"
  let 
    treatment0 = Treatment with name = "Placebo", dosage = 0.0 -- one of the treatments should be with a placebo
    treatment1 = Treatment with name = "v1", dosage = 0.5
    treatment2 = Treatment with name = "v2", dosage = 1.0

  -- Sponsor: Create ClinicalTrial Contract
  trialId <- submit sponsor1 do
    createCmd ClinicalTrial
      with
        name = "Pfizer Vaccine"
        phase = PhaseI
        state = TrialCreated
        sponsor = sponsor1
        principalResearcher = None
        brochurePath = None
        regulatoryAuthorityApprovals = []
        treatments = [treatment0, treatment1, treatment2]
        treatmentResults = []
        monitorResults = []
        patients = []
        medics = []
        observers = S.empty

  -- Sponsor: Add Researcher (Propose Accept)
  researcher1 <- allocateParty "Rose Researcher"
  addPrincipalResearcherProposalId <- submit sponsor1 do
    exerciseCmd trialId InvitePrincipalResearcher with trialId; researcher = researcher1

  addPrincipalResearcherAgreementId <- submit researcher1 do
    exerciseCmd addPrincipalResearcherProposalId AcceptAddPrincipalResearcherProposal

  trialId <- submit sponsor1 do
    exerciseCmd addPrincipalResearcherAgreementId AddPrincipalResearcher 
  
  -- RegulatoryAuthority approve trial
  infarmed <- allocateParty "Infarmed"
  (trialId, trialProposalId) <- submit sponsor1 do
    exerciseCmd trialId ProposeClinicalTrial with regulatoryAuthority = infarmed

  trialId <- submit infarmed do
    exerciseCmd trialProposalId AcceptClinicalTrialProposal with trialId

  -- Sponsor: Start Trial
  trialId <- submit sponsor1 do
    exerciseCmd trialId StartTrial

  -- PResearcher: CreateBrochure
  trialId <- submit researcher1 do
    exerciseCmd trialId CreateBrochure with brochurePath = "c:\\path\\hash"
  
  -- PResearcher: Add Medic (Propose -> Accept)
  medic1 <- allocateParty "Dr John Medic"
  addMedicProposalId <- submit researcher1 do
    exerciseCmd trialId InviteMedic with medic = medic1

  addMedicAgreementId <- submit medic1 do
    exerciseCmd addMedicProposalId AcceptAddMedicProposal

  trialId <- submit researcher1 do
    exerciseCmd addMedicAgreementId AddMedic with trialId

  -- Patient: Register personal info and share
  patient1 <- allocateParty "Thomas Patient"
    
  -- Researcher: Add Patient
  addPatientProposalId <- submit medic1 do
    exerciseCmd trialId InvitePatient with medic = medic1, patient = patient1

  patient1InfoId <- submit patient1 do
    createCmd PatientInfo 
        with 
          patient = patient1
          age = 24
          sex = M
          observers = S.empty

  patient1InfoId <- submit patient1 do
    exerciseCmd patient1InfoId SharePatientInfo with party = medic1

  addPatientAgreementId <- submit patient1 do
    exerciseCmd addPatientProposalId AcceptAddPatientProposal
      with patientInfoId = patient1InfoId

  trialId <- submit medic1 do
    exerciseCmd addPatientAgreementId AddPatient with trialId


  -- Medic: Perform Treatment
  now <- getTime -- ERROR date = 1970
  let
    treatmentResult1 = TreatmentResult with patient = patient1, treatment = treatment1, notes = "Feeling well", time = now
  trialId <- submit medic1 do
    exerciseCmd trialId PerformTreatment
      with medic = medic1; treatmentResultToAdd = treatmentResult1

  -- Medic: Monitor Patient
  now <- getTime -- ERROR date = 1970
  let
    monitorResult1 = MonitorResult with patient = patient1, exam = "TAC Scan", notes = "Cancer reduction", time = now
  trialId <- submit medic1 do
    exerciseCmd trialId MonitorPatient
      with medic = medic1; monitorResultToAdd = monitorResult1

     
  -- Medic: Drop Patient
  trialId <- submit medic1 do
    exerciseCmd trialId DropPatient
      with medic = medic1; patient = patient1

  return ()